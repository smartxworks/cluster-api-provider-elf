apiVersion: v1
kind: ConfigMap
metadata:
  name: hostagent-jobs
  namespace: default
data:
  expand-root-partition: |
    - name: Expand root partition
      hosts: all
      become: true
      gather_facts: true
      tasks:
      - name: Set root device
        ansible.builtin.set_fact:
          rootdevice: >-
            {{ ansible_mounts | selectattr('mount', 'equalto', '/') | map(attribute='device') | first }}

      - name: Set root partition
        ansible.builtin.set_fact:
          rootpartition: >-
            {{ ansible_devices
               | dict2items
               | map(attribute='value.partitions')
               | map('dict2items')
               | flatten(1)
               | selectattr('value.holders', 'defined')
               | selectattr('value.holders', 'contains', rootdevice.split('/')[-1])
               | map(attribute='key')
               | first }}

      - name: Grow partition
        shell: |
          result=$(growpart /dev/{{ rootpartition | regex_replace('[0-9]+$', '') }} {{ rootpartition | regex_search('[0-9]+$') }})
          if [ $? -eq 0 ]; then
            echo "$result"
          elif echo "$result" | grep -q '^NOCHANGE'; then
            echo "$result"
          else
            echo "$result"
            exit 1
          fi

      - name: Resize partition
        shell: pvresize /dev/{{ rootpartition }}

      - name: Extend root
        shell: |
          result=$(lvextend -r -l+100%FREE -n {{ rootdevice }} 2>&1)
          if [ $? -eq 0 ]; then
            echo "$result"
          elif echo "$result" | grep -q 'matches existing size'; then
            echo "$result"
          else
            echo "$result"
            exit 1
          fi

  restart-kubelet: |
    - name: Kubelet | restart kubelet
      hosts: all
      become: true
      gather_facts: false
      tasks:
      - ansible.builtin.service:
          name: kubelet
          state: restarted

  set-network-device-config: |
    - name: Set network device configuration
      hosts: all
      become: true
      gather_facts: false
      tasks:
      - name: Set network configuration for unconfigured nics
        shell: |
          set -e

          echo "get list of ens/enp nics"
          all_nics=($(ls /sys/class/net | grep -E '^(ens[0-9]+|enp[0-9]+s[0-9]+)$'))

          echo "classify nics as unconfigured and static-configured"
          unconfigured_nics=()
          static_configured_nics=()
          for nic in "${all_nics[@]}"; do
            if ! ls /etc/sysconfig/network-scripts/ifcfg-$nic* 1>/dev/null 2>&1; then
              unconfigured_nics+=("$nic")
            else
              if ls /etc/sysconfig/network-scripts/ifcfg-$nic-staticX 1>/dev/null 2>&1; then
                static_configured_nics+=("$nic")
              fi
            fi
          done

          for nic in "${unconfigured_nics[@]}"; do
            echo "set network configuration for nic $nic"
            nmcli device connect $nic
            connection_name=$(nmcli -g GENERAL.CONNECTION device show "$nic")
            nmcli connection modify "$connection_name" ipv4.never-default yes ipv6.never-default yes ipv4.ignore-auto-dns yes ipv6.ignore-auto-dns yes
            nmcli conn up "$connection_name"
          done

          if [ ${#unconfigured_nics[@]} -gt 0 ]; then
            echo "set network configuration for unconfigured nics done"
          fi

          for nic in "${static_configured_nics[@]}"; do
            echo "set default network configuration for nic $nic"
            connection_name=$(nmcli -g GENERAL.CONNECTION device show "$nic")
            nmcli connection modify "$connection_name" ipv4.never-default yes ipv6.never-default yes ipv4.ignore-auto-dns yes ipv6.ignore-auto-dns yes
          done

          if [ ${#static_configured_nics[@]} -gt 0 ]; then
            echo "set default network configuration for static-configured nics done"
          fi

          echo "set network configuration for nics done"