---
# E2E test scenario using local dev images and manifests built from the source tree for following providers:
# - cluster-api
# - bootstrap kubeadm
# - control-plane kubeadm
# - elf

# For creating local dev images built from the source tree;
# - from the CAPI repository root, `make docker-build REGISTRY=gcr.io/k8s-staging-cluster-api` to build the cluster-api,
#  bootstrap kubeadm, control-plane kubeadm provider images. This step can be skipped to use upstream images.
# - from the CAPE repository root, `make e2e` to build the elf provider image and run e2e tests.

images:
  - name: gcr.io/k8s-staging-cluster-api/cluster-api-controller-amd64:v0.4.0
    loadBehavior: tryLoad
  - name: gcr.io/k8s-staging-cluster-api/kubeadm-bootstrap-controller-amd64:v0.4.0
    loadBehavior: tryLoad
  - name: gcr.io/k8s-staging-cluster-api/kubeadm-control-plane-controller-amd64:v0.4.0
    loadBehavior: tryLoad
  - name: gcr.io/k8s-staging-cluster-api/cape-manager:e2e
    loadBehavior: mustLoad
  - name: quay.io/jetstack/cert-manager-cainjector:v1.0.1
    loadBehavior: tryLoad
  - name: quay.io/jetstack/cert-manager-webhook:v1.0.1
    loadBehavior: tryLoad
  - name: quay.io/jetstack/cert-manager-controller:v1.0.1
    loadBehavior: tryLoad

providers:

  - name: cluster-api
    type: CoreProvider
    versions:
      - name: v0.4.0
        # Use manifest from source files
        value: "https://github.com/kubernetes-sigs/cluster-api/releases/download/v0.4.0/core-components.yaml"
        type: "url"
        files:
          - sourcePath: "../data/shared/metadata.yaml"
        replacements:
          - old: "imagePullPolicy: Always"
            new: "imagePullPolicy: IfNotPresent"
          - old: "--leader-elect"
            new: "--leader-elect=false"
          - old: --metrics-bind-addr=127.0.0.1:8080
            new: --metrics-bind-addr=:8080

  - name: kubeadm
    type: BootstrapProvider
    files:
       - sourcePath: "../data/shared/metadata.yaml"
    versions:
      - name: v0.4.0
        # Use manifest from source files
        value: "https://github.com/kubernetes-sigs/cluster-api/releases/download/v0.4.0/bootstrap-components.yaml"
        type: "url"
        replacements:
          - old: "imagePullPolicy: Always"
            new: "imagePullPolicy: IfNotPresent"
          - old: "--leader-elect"
            new: "--leader-elect=false"
          - old: --metrics-bind-addr=127.0.0.1:8080
            new: --metrics-bind-addr=:8080

  - name: kubeadm
    type: ControlPlaneProvider
    files:
      - sourcePath: "../data/shared/metadata.yaml"
    versions:
      - name: v0.4.0
        # Use manifest from source files
        value: "https://github.com/kubernetes-sigs/cluster-api/releases/download/v0.4.0/control-plane-components.yaml"
        type: "url"
        replacements:
          - old: "imagePullPolicy: Always"
            new: "imagePullPolicy: IfNotPresent"
          - old: "--leader-elect"
            new: "--leader-elect=false"
          - old: --metrics-bind-addr=127.0.0.1:8080
            new: --metrics-bind-addr=:8080

  - name: elf
    type: InfrastructureProvider
    versions:
      - name: v0.1.0
        # Use manifest from source files
        value: ../../../../cluster-api-provider-elf/config/default
        replacements:
          - old: gcr.io/cluster-api-provider-elf/release/manager:latest
            new: gcr.io/k8s-staging-cluster-api/cape-manager:e2e
          - old: "imagePullPolicy: Always"
            new: "imagePullPolicy: IfNotPresent"
          - old: "--leader-elect"
            new: "--leader-elect=false"
          - old: --metrics-bind-addr=127.0.0.1:8080
            new: --metrics-bind-addr=:8080

    files:
      # Add a cluster template
      - sourcePath: "../../../test/e2e/data/infrastructure-elf/cluster-template.yaml"
      - sourcePath: "../../../test/e2e/data/infrastructure-elf/cluster-template-cp-ha.yaml"
      - sourcePath: "../../../test/e2e/data/infrastructure-elf/cluster-template-kcp-remediation.yaml"
      - sourcePath: "../../../test/e2e/data/infrastructure-elf/cluster-template-kcp-scale-in.yaml"
      - sourcePath: "../../../test/e2e/data/infrastructure-elf/cluster-template-md-remediation.yaml"
      - sourcePath: "../../../metadata.yaml"

variables:
  KUBERNETES_VERSION: "v1.20.6"
  KUBERNETES_VERSION_UPGRADE_TO: "v1.21.2"
  KUBERNETES_VERSION_UPGRADE_FROM: "v1.20.6"
  ETCD_VERSION_UPGRADE_TO: "3.4.13-0"
  COREDNS_VERSION_UPGRADE_TO: "v1.8.0"
  CNI: "./data/cni/calico/calico.yaml"
  EXP_CLUSTER_RESOURCE_SET: "true"
  # CONTROL_PLANE_MACHINE_COUNT: 1
  # WORKER_MACHINE_COUNT: 1
  IP_FAMILY: "IPv4"
  # Following CAPE variables should be set before testing
  ELF_TEMPLATE: "336820d7-5ba5-4707-9d0c-8f3e583b950f"
  ELF_TEMPLATE_UPGRADE_TO: "c1347c27-ddd7-4b97-82e3-ca4e124623b4"
  # Also following variables are required but it is recommended to use env variables to avoid disclosure of sensitive data
  # CONTROL_PLANE_ENDPOINT_IP: "127.0.0.1"
  # ELF_SERVER: "127.0.0.1"
  # ELF_SERVER_USERNAME: "root"
  # ELF_SERVER_PASSWORD: "root"

intervals:
  default/wait-controllers: ["5m", "10s"]
  default/wait-cluster: ["5m", "10s"]
  default/wait-control-plane: ["7m", "10s"]
  default/wait-worker-nodes: ["5m", "10s"]
  default/wait-delete-cluster: ["5m", "10s"]
  default/wait-machine-upgrade: ["15m", "1m"]
  default/wait-nodes-ready: ["7m", "10s"]
  default/wait-machine-remediation: ["5m", "10s"]
  default/wait-vm-job: ["3m", "10s"]
